local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
local Window = Rayfield:CreateWindow({
    Name = "TGMANKASKE Hub",
    LoadingTitle = "TGMANKASKE",
    LoadingSubtitle = "Script Hub",
    ConfigurationSaving = { Enabled = false },
    Discord = { Enabled = false },
    KeySystem = false,
})

local Tab = Window:CreateTab("Main", 4483362458)
local Section = Tab:CreateSection("Scripts")

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local localPlayer = Players.LocalPlayer

-- Função recursiva para buscar todos os remotes (Event e Function)
local function getAllRemotes(container)
    local remotes = {}
    for _, child in ipairs(container:GetChildren()) do
        if child:IsA("RemoteEvent") or child:IsA("RemoteFunction") then
            table.insert(remotes, child)
        elseif #child:GetChildren() > 0 then
            for _, r in ipairs(getAllRemotes(child)) do
                table.insert(remotes, r)
            end
        end
    end
    return remotes
end

-- Encontra remote que contenha a keyword (case insensitive)
local function findRemote(remotes, keyword)
    for _, remote in ipairs(remotes) do
        if remote.Name:lower():find(keyword:lower()) then
            return remote
        end
    end
    return nil
end

local allRemotes = getAllRemotes(ReplicatedStorage)
local GivePackageRemote = findRemote(allRemotes, "GivePackageRemote")
local GivePackageToPlayer = findRemote(allRemotes, "GivePackageToPlayer")
local SellAllItemsRemote = findRemote(allRemotes, "SellAllItems")
local RebirthEvent = findRemote(allRemotes, "RebirthEvent")

-- Debug para confirmar remotes encontrados
print("GivePackageRemote:", GivePackageRemote and GivePackageRemote:GetFullName() or "Não encontrado")
print("GivePackageToPlayer:", GivePackageToPlayer and GivePackageToPlayer:GetFullName() or "Não encontrado")
print("SellAllItemsRemote:", SellAllItemsRemote and SellAllItemsRemote:GetFullName() or "Não encontrado")
print("RebirthEvent:", RebirthEvent and RebirthEvent:GetFullName() or "Não encontrado")

-- Pega nomes de packages em ReplicatedStorage
local function getPackageNames()
    local packages = {}
    for _, obj in ipairs(ReplicatedStorage:GetChildren()) do
        if obj.Name:find("Package") then
            table.insert(packages, obj.Name)
        end
    end
    return packages
end

-- Função segura para chamar remotes
local function safeFire(remote, ...)
    if not remote then
        warn("[safeFire] Remote inválido (nil)")
        return
    end
    local success, err = pcall(function()
        if remote:IsA("RemoteFunction") then
            remote:InvokeServer(...)
        elseif remote:IsA("RemoteEvent") then
            remote:FireServer(...)
        else
            warn("[safeFire] Remote não é Event nem Function:", remote:GetFullName())
        end
    end)
    if not success then
        warn("[safeFire] Erro ao chamar remote:", err)
    end
end

-- Farm Packages ultra rápido
local farm_active = false
Section:CreateToggle({
    Name = "Farm Packages (FAST)",
    CurrentValue = false,
    Flag = "FarmPackagesFast",
    Callback = function(state)
        farm_active = state
        if farm_active then
            task.spawn(function()
                if not (GivePackageRemote or GivePackageToPlayer) then
                    warn("[Farm] Remotes GivePackage não encontrados!")
                    return
                end
                while farm_active do
                    local packages = getPackageNames()
                    for _, name in ipairs(packages) do
                        safeFire(GivePackageRemote, name)
                        safeFire(GivePackageToPlayer, localPlayer, name)
                    end
                    task.wait() -- delay mínimo para estabilidade
                end
            end)
        end
    end,
})

-- Auto Rebirth
local rebirth_active = false
Section:CreateToggle({
    Name = "Auto Rebirth",
    CurrentValue = false,
    Flag = "AutoRebirth",
    Callback = function(state)
        rebirth_active = state
        if rebirth_active then
            task.spawn(function()
                if not RebirthEvent then
                    warn("[AutoRebirth] RebirthEvent não encontrado!")
                    return
                end
                while rebirth_active do
                    safeFire(RebirthEvent)
                    task.wait(2)
                end
            end)
        end
    end,
})

-- Botão para vender todos os itens
Section:CreateButton({
    Name = "Sell All Items",
    Callback = function()
        if not SellAllItemsRemote then
            warn("[Sell] SellAllItemsRemote não encontrado!")
            return
        end
        safeFire(SellAllItemsRemote)
        Rayfield:Notify({
            Title = "Venda",
            Content = "SellAllItems enviado com sucesso!",
            Duration = 3.5,
            Image = 4483362458
        })
    end,
})
